# https://help.github.com/en/actions
name: Full CI process for Symfony 6
on:
    pull_request:
        types: [opened, reopened]
jobs:
    symfony:
        name: Symfony 6.1 (PHP ${{ matrix.php-versions }})
        # https://hub.docker.com/_/ubuntu/
        runs-on: ubuntu-20.04
        services:
            pgsql:
                image: postgres:14-alpine
                env:
                    POSTGRES_PASSWORD: root
                    POSTGRES_USER: root
        strategy:
            fail-fast: true
            matrix:
                php-versions: ['8.1']
        steps:
            # —— Setup Github actions 🐙 —————————————————————————————————————————————
            # https://github.com/actions/checkout (official)
            - name: Checkout
              uses: actions/checkout@v2
            
            # https://github.com/shivammathur/setup-php (community)
            - name: Setup PHP, extensions and composer with shivammathur/setup-php
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring
              env:
                  update: true

            - name: Check PHP Version
              run: php -v
            
            ## —— Yarn 🐱 ————————————————————————————————————————————————————————————
            - name: Yarn install
              uses: actions/setup-node@v2
              with:
                  node-version: '14'
                  #registry-url: npm.fontawesome.com
            - run: yarn install
                #env:
                #NODE_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

            - name: Yarn build
              run: yarn run encore production
            
            # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
            - name: Validate composer.json and composer.lock
              run: composer validate

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: make vendor
            
            # —— Symfony 🎵 ——————————————————————————————————————————————————————————
            - name: Check Symfony requirements
              run: vendor/bin/requirements-checker

            - name: Check the Symfony console
              run: |
                  bin/console about
                  bin/console cache:clear
            
            ## —— Coding standards ✨ ————————————————————————————————————————————————
            - name: Coding standards checks (php_codesniffer + php-cs-fixer)
              run: make lint-php
              if: matrix.php-versions == '8.0'
            
            ## —— Static analysis ✨ —————————————————————————————————————————————————
            - name: Static analysis of PHP code (PHPStan)
              run: |
                  bin/console about --env=prod
                  make stan
                  
            ## —— Twig coding standards ✨ —————————————————————————————————————————————————
            - name: Twig Coding Standards (TwigCS)
              run: |
                  bin/console about --env=prod
                  make stan
            
            ## —— Tests ✅ ———————————————————————————————————————————————————————————
            # We use the dev env here
            - name: Load Doctrine fixtures
              run: |
                  make db fixtures

            - name: Run functionnal and unit tests
              run: |
                  cp phpunit.xml.ci phpunit.xml
                  make test
